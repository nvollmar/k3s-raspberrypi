---

- name: "Create grafana service account"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: grafana
        namespace: monitoring

- name: "Create grafana deployment"
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: grafana
        namespace: monitoring
        labels:
          app: grafana
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: grafana
        strategy:
          rollingUpdate:
            maxSurge: 0
            maxUnavailable: 1
          type: RollingUpdate
        template:
          metadata:
            labels:
              app: grafana
            annotations:
              prometheus.io/port: "3000"
              prometheus.io/scrape: "true"
          spec:
            restartPolicy: Always
            securityContext:
              runAsNonRoot: true
              runAsUser: 65534
              fsGroup: 65534
            serviceAccountName: grafana
            terminationGracePeriodSeconds: 60
            containers:
              - name: grafana
                image: "grafana/grafana:{{ grafana_image_tag }}"
                env: [ ]
                ports:
                  - containerPort: 3000
                    name: http
                readinessProbe:
                  httpGet:
                    path: /api/health
                    port: http
                resources:
                  limits:
                    cpu: 800m
                    memory: 400Mi
                  requests:
                    cpu: 200m
                    memory: 200Mi
                volumeMounts:
                - name: grafana-config
                  mountPath: /etc/grafana/grafana.ini
                  subPath: grafana.ini
                  readOnly: true
                - name: grafana-notifiers
                  mountPath: /etc/grafana/provisioning/notifiers
                  readOnly: true
                - name: grafana-datasources
                  mountPath: /etc/grafana/provisioning/datasources
                  readOnly: true
                - name: grafana-dashboard-providers
                  mountPath: /etc/grafana/provisioning/dashboards
                  readOnly: true
                - name: grafana-dashboards-logging
                  mountPath: /var/lib/grafana/dashboards/logging
                - name: grafana-dashboards-monitoring
                  mountPath: /var/lib/grafana/dashboards/monitoring
                - name: grafana-dashboards-server-monitoring
                  mountPath: /var/lib/grafana/dashboards/server-monitoring
            nodeSelector:
              node-type: worker
            volumes:
              - name: grafana-config
                configMap:
                  name: grafana-config
                  defaultMode: 420
              - name: grafana-datasources
                configMap:
                  name: grafana-datasources
                  defaultMode: 420
              - name: grafana-notifiers
                configMap:
                  name: grafana-notifiers
                  defaultMode: 420
              - name: grafana-dashboard-providers
                configMap:
                  name: grafana-dashboard-providers
                  defaultMode: 420
              - name: grafana-dashboards-monitoring
                configMap:
                  name: grafana-dashboards-monitoring
                  defaultMode: 420
              - name: grafana-dashboards-server-monitoring
                configMap:
                  name: grafana-dashboards-server-monitoring
                  defaultMode: 420
              - name: grafana-dashboards-logging
                configMap:
                  name: grafana-dashboards-logging
                  defaultMode: 420

- name: "Create grafana service"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: grafana
        namespace: monitoring
        labels:
          app: grafana
      spec:
        type: ClusterIP
        selector:
          app: grafana
        ports:
          - name: http
            port: 3000
            targetPort: http