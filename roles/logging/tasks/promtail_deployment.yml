---

- name: "Create promtail service account"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: promtail
        namespace: monitoring
        labels:
          app: promtail

- name: "Create promtail cluster role"
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        labels:
          app: promtail
        name: promtail
      rules:
        - apiGroups: [""]
          resources:
            - nodes
            - nodes/proxy
            - services
            - endpoints
            - pods
          verbs: ["get", "watch", "list"]

- name: "Create promtail cluster role binding"
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: promtail
        labels:
          app: promtail
      subjects:
        - kind: ServiceAccount
          name: promtail
          namespace: monitoring
      roleRef:
        kind: ClusterRole
        name: promtail
        apiGroup: rbac.authorization.k8s.io

- name: "Create promtail configuration"
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: promtail-config
        namespace: monitoring
        labels:
          app: promtail
      data:
        promtail.yaml: |-
          server:
            log_level: info
            http_listen_port: 3101
          
          clients:
            - url: http://loki-discovery.monitoring.svc:3100/loki/api/v1/push
          
          positions:
            filename: /run/promtail/positions.yaml
          
          scrape_configs:
            # See also https://github.com/grafana/loki/blob/master/production/ksonnet/promtail/scrape_config.libsonnet for reference
            - job_name: kubernetes-pods
              kubernetes_sd_configs:
                - role: pod
              pipeline_stages:
                - cri: {}
                - match:
                    selector: '{app!=""}'
                    stages:
                      - regex:
                          expression: 'level=(?P<level>\w+)'
                      - labels:
                          level:
              relabel_configs:
                - target_label: key
                  replacement: k3s
                - source_labels:
                    - __meta_kubernetes_pod_controller_name
                  regex: ([0-9a-z-.]+?)(-[0-9a-f]{8,10})?
                  action: replace
                  target_label: __tmp_controller_name
                - source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_name
                    - __meta_kubernetes_pod_label_app
                    - __tmp_controller_name
                    - __meta_kubernetes_pod_name
                  regex: ^;*([^;]+)(;.*)?$
                  action: replace
                  target_label: app
                - source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_instance
                    - __meta_kubernetes_pod_label_release
                  regex: ^;*([^;]+)(;.*)?$
                  action: replace
                  target_label: instance
                - source_labels:
                    - __meta_kubernetes_pod_label_app_kubernetes_io_component
                    - __meta_kubernetes_pod_label_component
                  regex: ^;*([^;]+)(;.*)?$
                  action: replace
                  target_label: component
                - action: replace
                  source_labels:
                    - __meta_kubernetes_pod_node_name
                  target_label: node_name
                - action: replace
                  source_labels:
                    - __meta_kubernetes_namespace
                  target_label: namespace
                - action: replace
                  replacement: $1
                  separator: /
                  source_labels:
                    - namespace
                    - app
                  target_label: job
                - action: replace
                  source_labels:
                    - __meta_kubernetes_pod_name
                  target_label: pod
                - action: replace
                  source_labels:
                    - __meta_kubernetes_pod_container_name
                  target_label: container
                - action: replace
                  replacement: /var/log/pods/*$1/*.log
                  separator: /
                  source_labels:
                    - __meta_kubernetes_pod_uid
                    - __meta_kubernetes_pod_container_name
                  target_label: __path__
                - action: replace
                  regex: true/(.*)
                  replacement: /var/log/pods/*$1/*.log
                  separator: /
                  source_labels:
                    - __meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash
                    - __meta_kubernetes_pod_annotation_kubernetes_io_config_hash
                    - __meta_kubernetes_pod_container_name
                  target_label: __path__

- name: "Create promtail daemonset"
  k8s:
    state: present
    definition:
      apiVersion: apps/v1
      kind: DaemonSet
      metadata:
        name: promtail
        namespace: monitoring
        labels:
          app: promtail
      spec:
        updateStrategy:
          rollingUpdate:
            maxSurge: 0
            maxUnavailable: 1
          type: RollingUpdate
        selector:
          matchLabels:
            app: promtail
        template:
          metadata:
            labels:
              app: promtail
            annotations:
              prometheus.io/port: "3101"
              prometheus.io/scrape: "true"
          spec:
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext:
              runAsGroup: 0
              runAsUser: 0
            serviceAccount: promtail
            serviceAccountName: promtail
            terminationGracePeriodSeconds: 30
            containers:
              - name: promtail
                image: "docker.io/grafana/promtail:{{ promtail_image_tag }}"
                imagePullPolicy: IfNotPresent
                args: [ '-config.file=/etc/promtail/promtail.yaml' ]
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                      - ALL
                  readOnlyRootFilesystem: true
                env:
                  - name: HOSTNAME
                    valueFrom:
                      fieldRef:
                        apiVersion: v1
                        fieldPath: spec.nodeName
                ports:
                  - containerPort: 3101
                    name: http-metrics
                    protocol: TCP
                readinessProbe:
                  failureThreshold: 5
                  httpGet:
                    path: /ready
                    port: http-metrics
                    scheme: HTTP
                  initialDelaySeconds: 10
                  periodSeconds: 10
                  successThreshold: 1
                  timeoutSeconds: 1
                terminationMessagePath: /dev/termination-log
                terminationMessagePolicy: File
                volumeMounts:
                  - mountPath: /etc/promtail
                    name: promtail-config
                    readOnly: true
                  - mountPath: /run/promtail
                    name: run
                  - mountPath: /var/lib/docker/containers
                    name: containers
                    readOnly: true
                  - mountPath: /var/log/pods
                    name: pods
                    readOnly: true
            volumes:
              - name: promtail-config
                configMap:
                  name: promtail-config
                  defaultMode: 420
                  readOnly: true
              - hostPath:
                  path: /run/promtail
                  type: ""
                name: run
              - hostPath:
                  path: /var/lib/docker/containers
                  type: ""
                name: containers
              - hostPath:
                  path: /var/log/pods
                  type: ""
                name: pods